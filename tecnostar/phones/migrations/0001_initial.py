# Generated by Django 5.0.4 on 2024-06-08 16:49

import ckeditor.fields
import django.db.models.deletion
import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CameraInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('megapixels', models.PositiveIntegerField(help_text='Введите количество мегапикселей', verbose_name='Мегапиксели')),
            ],
            options={
                'verbose_name': 'Мегапиксель',
                'verbose_name_plural': 'Мегапиксели',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите название категории', max_length=100, verbose_name='Название')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Введите описание категории', verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите название цвета', max_length=100, verbose_name='Название цвета')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('color', models.CharField(default='#000000', help_text='Выберите цвет', max_length=7, verbose_name='Цвет')),
            ],
            options={
                'verbose_name': 'Цвет',
                'verbose_name_plural': 'Цвета',
            },
        ),
        migrations.CreateModel(
            name='Mailing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Введите адрес электронной почты', max_length=100, verbose_name='Электронная почта')),
            ],
            options={
                'verbose_name': 'Подписчик',
                'verbose_name_plural': 'Подписчики',
            },
        ),
        migrations.CreateModel(
            name='Memory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.PositiveIntegerField(help_text='Введите объем памяти', verbose_name='Объем памяти')),
            ],
            options={
                'verbose_name': 'Память',
                'verbose_name_plural': 'Память',
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите название сети', max_length=100, verbose_name='Название сети')),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Сеть',
                'verbose_name_plural': 'Сети',
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, verbose_name='Описание описание')),
            ],
            options={
                'verbose_name': 'Магазин',
                'verbose_name_plural': 'Магазины',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Введите название центра', max_length=100, verbose_name='Название')),
                ('address_line', models.CharField(help_text='Введите адрес центра', max_length=255, verbose_name='Адрес')),
                ('phone_line', models.CharField(help_text='Введите контакты (номера для связи)', max_length=255, verbose_name='Контакты')),
                ('work_time', models.CharField(help_text='Введите время работы', max_length=255, verbose_name='Время работы')),
                ('latitude', models.FloatField(help_text='Введите широту', verbose_name='Широта')),
                ('longitude', models.FloatField(help_text='Введите долготу', verbose_name='Долгота')),
                ('status', models.CharField(choices=[('draft', 'Не активен'), ('published', 'Активен')], default='draft', max_length=10, verbose_name='Статус сервиса')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='phones.city', verbose_name='Город')),
            ],
            options={
                'verbose_name': 'Сервисный центр',
                'verbose_name_plural': 'Сервисные центры',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('title_ru', models.CharField(max_length=100, null=True, verbose_name='Название')),
                ('title_kk', models.CharField(max_length=100, null=True, verbose_name='Название')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('pattern', models.CharField(choices=[('slider_news', 'На слайдере'), ('second_form_news', 'На основной странице')], default='second_form_news', max_length=20, verbose_name='Тип')),
                ('preview_image', models.ImageField(help_text='Загрузите изображение', upload_to='newspapers', verbose_name='Превью')),
                ('description', models.TextField(blank=True, verbose_name='Краткое описание')),
                ('description_ru', models.TextField(blank=True, null=True, verbose_name='Краткое описание')),
                ('description_kk', models.TextField(blank=True, null=True, verbose_name='Краткое описание')),
                ('content', ckeditor.fields.RichTextField(help_text='Введите контент', verbose_name='Основной текст')),
                ('content_ru', ckeditor.fields.RichTextField(help_text='Введите контент', null=True, verbose_name='Основной текст')),
                ('content_kk', ckeditor.fields.RichTextField(help_text='Введите контент', null=True, verbose_name='Основной текст')),
                ('status', models.CharField(choices=[('draft', 'Не активен'), ('published', 'Активен')], default='draft', max_length=10, verbose_name='Статус')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('inner_link', models.URLField(blank=True, verbose_name='Ссылка (если имеется)')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='phones.city', verbose_name='Местоположение')),
            ],
            options={
                'verbose_name': 'Новость',
                'verbose_name_plural': 'Новости',
                'ordering': ['-created_at'],
            },
            managers=[
                ('published', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Phone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Введите название телефона', max_length=100, verbose_name='Название')),
                ('title_ru', models.CharField(help_text='Введите название телефона', max_length=100, null=True, verbose_name='Название')),
                ('title_kk', models.CharField(help_text='Введите название телефона', max_length=100, null=True, verbose_name='Название')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Не активен'), ('published', 'Активен')], default='draft', max_length=10, verbose_name='Статус на сайте')),
                ('display', models.FloatField(choices=[(5.0, '5,6"'), (5.5, '5,5"'), (5.65, '5,65"'), (5.7, '5,7"'), (6.0, '6"'), (6.1, '6,1"'), (6.2, '6,2"'), (6.35, '6,35"'), (6.4, '6,4"')], default=5.0, help_text='Выберите диагональ дисплея', verbose_name='Дисплей')),
                ('price', models.FloatField(default=100000, help_text='Введите цену телефона', verbose_name='Цена')),
                ('resolution', models.CharField(choices=[('FHD', 'FHD'), ('HD', 'HD'), ('FWVGA', 'FWVGA'), ('WVGA', 'WVGA')], default='HD', help_text='Выберите разрешение экрана', max_length=10, verbose_name='Разрешение')),
                ('has_touch_id', models.BooleanField(default=False, verbose_name='Есть Touch ID')),
                ('battery', models.FloatField(default=3500, help_text='Введите емкость батареи', verbose_name='Батарея')),
                ('inner_link', models.URLField(blank=True, verbose_name='Внутренняя ссылка')),
                ('operating_system', ckeditor.fields.RichTextField(help_text='Введите информацию об операционной системе', verbose_name='Операционная система')),
                ('operating_system_ru', ckeditor.fields.RichTextField(help_text='Введите информацию об операционной системе', null=True, verbose_name='Операционная система')),
                ('operating_system_kk', ckeditor.fields.RichTextField(help_text='Введите информацию об операционной системе', null=True, verbose_name='Операционная система')),
                ('cpu_info', ckeditor.fields.RichTextField(help_text='Введите информацию о процессоре', verbose_name='Процессор')),
                ('cpu_info_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о процессоре', null=True, verbose_name='Процессор')),
                ('cpu_info_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о процессоре', null=True, verbose_name='Процессор')),
                ('size', ckeditor.fields.RichTextField(help_text='Введите информацию о размерах', verbose_name='Размеры')),
                ('size_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о размерах', null=True, verbose_name='Размеры')),
                ('size_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о размерах', null=True, verbose_name='Размеры')),
                ('display_info', ckeditor.fields.RichTextField(help_text='Введите информацию о дисплее', verbose_name='Дисплей')),
                ('display_info_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о дисплее', null=True, verbose_name='Дисплей')),
                ('display_info_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о дисплее', null=True, verbose_name='Дисплей')),
                ('resolution_info', ckeditor.fields.RichTextField(help_text='Введите информацию о разрешении', verbose_name='Разрешение')),
                ('resolution_info_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о разрешении', null=True, verbose_name='Разрешение')),
                ('resolution_info_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о разрешении', null=True, verbose_name='Разрешение')),
                ('camera_info', ckeditor.fields.RichTextField(help_text='Введите информацию о камере', verbose_name='Камера')),
                ('camera_info_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о камере', null=True, verbose_name='Камера')),
                ('camera_info_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о камере', null=True, verbose_name='Камера')),
                ('connection', ckeditor.fields.RichTextField(help_text='Введите информацию о подключениях', verbose_name='Подключения')),
                ('connection_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о подключениях', null=True, verbose_name='Подключения')),
                ('connection_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о подключениях', null=True, verbose_name='Подключения')),
                ('sensors', ckeditor.fields.RichTextField(help_text='Введите информацию о датчиках', verbose_name='Датчики')),
                ('sensors_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о датчиках', null=True, verbose_name='Датчики')),
                ('sensors_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о датчиках', null=True, verbose_name='Датчики')),
                ('battery_info', ckeditor.fields.RichTextField(help_text='Введите информацию о батарее', verbose_name='Батарея')),
                ('battery_info_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о батарее', null=True, verbose_name='Батарея')),
                ('battery_info_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о батарее', null=True, verbose_name='Батарея')),
                ('sound_info', ckeditor.fields.RichTextField(help_text='Введите информацию о динамике', verbose_name='Динамики')),
                ('sound_info_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о динамике', null=True, verbose_name='Динамики')),
                ('sound_info_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о динамике', null=True, verbose_name='Динамики')),
                ('cellurral_info', ckeditor.fields.RichTextField(help_text='Введите информацию о сотовой связи', verbose_name='Сотовая связь')),
                ('cellurral_info_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о сотовой связи', null=True, verbose_name='Сотовая связь')),
                ('cellurral_info_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о сотовой связи', null=True, verbose_name='Сотовая связь')),
                ('audio_video_info', ckeditor.fields.RichTextField(help_text='Введите информацию об аудио и видео', verbose_name='Аудио и видео')),
                ('audio_video_info_ru', ckeditor.fields.RichTextField(help_text='Введите информацию об аудио и видео', null=True, verbose_name='Аудио и видео')),
                ('audio_video_info_kk', ckeditor.fields.RichTextField(help_text='Введите информацию об аудио и видео', null=True, verbose_name='Аудио и видео')),
                ('complete_set', ckeditor.fields.RichTextField(help_text='Введите информацию о комплектации', verbose_name='Комплектация')),
                ('complete_set_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о комплектации', null=True, verbose_name='Комплектация')),
                ('complete_set_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о комплектации', null=True, verbose_name='Комплектация')),
                ('biometric_info', ckeditor.fields.RichTextField(help_text='Введите информацию о биометрии', verbose_name='Биометрия')),
                ('biometric_info_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о биометрии', null=True, verbose_name='Биометрия')),
                ('biometric_info_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о биометрии', null=True, verbose_name='Биометрия')),
                ('parameters_info', ckeditor.fields.RichTextField(help_text='Введите информацию о параметрах', verbose_name='Параметры')),
                ('parameters_info_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о параметрах', null=True, verbose_name='Параметры')),
                ('parameters_info_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о параметрах', null=True, verbose_name='Параметры')),
                ('record_video', ckeditor.fields.RichTextField(help_text='Введите информацию о записи видео', verbose_name='Запись видео')),
                ('record_video_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о записи видео', null=True, verbose_name='Запись видео')),
                ('record_video_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о записи видео', null=True, verbose_name='Запись видео')),
                ('possible_connection', ckeditor.fields.RichTextField(help_text='Введите информацию о возможных подключениях', verbose_name='Возможные подключения')),
                ('possible_connection_ru', ckeditor.fields.RichTextField(help_text='Введите информацию о возможных подключениях', null=True, verbose_name='Возможные подключения')),
                ('possible_connection_kk', ckeditor.fields.RichTextField(help_text='Введите информацию о возможных подключениях', null=True, verbose_name='Возможные подключения')),
                ('back_camera', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='back_camera', to='phones.camerainfo')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phones', to='phones.category')),
                ('front_camera', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='front_camera', to='phones.camerainfo')),
                ('memories', models.ManyToManyField(related_name='phones', to='phones.memory')),
                ('network', models.ManyToManyField(related_name='phones', to='phones.network')),
            ],
            options={
                'verbose_name': 'Телефон',
                'verbose_name_plural': 'Телефоны',
            },
            managers=[
                ('published', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Загрузите изображение', upload_to='phones', verbose_name='Фото')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='phones.color', verbose_name='Цвет')),
                ('phone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='phones.phone')),
            ],
            options={
                'verbose_name': 'Фото',
                'verbose_name_plural': 'Фото',
            },
        ),
        migrations.CreateModel(
            name='StoreURLField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(verbose_name='Ссылка на телефон')),
                ('phone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stores', to='phones.phone')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='phones.store', verbose_name='Магазин')),
            ],
            options={
                'verbose_name': 'Ссылка на покупку ',
                'verbose_name_plural': 'Ссылки на покупки',
            },
        ),
    ]
